package com.pinsheng.map;

import java.util.List;
import java.util.Map;

import com.android.http.LoadControler;
import com.android.http.RequestManager;
import com.android.http.RequestManager.RequestListener;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.pinsheng.help.R;
import com.pinsheng.mode.DangerousaAll.Data;
import com.pinsheng.util.Constant;
import com.pinsheng.util.Util;

import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

public class SearchActivity extends Activity implements OnItemClickListener {
	private PullToRefreshListView mListView;
	private EditText mEdit;
	private TextView mText;

	private MyAdapter adapter;
	private Intent intent;

	private LoadControler mLoadControler = null;
	private LinearLayout.LayoutParams lps;

	private Data dangerous;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_search);
		ActionBar actionBar = this.getActionBar();
		actionBar.setIcon(R.drawable.ic_return);
		actionBar.setHomeButtonEnabled(true);
		actionBar.setTitle("周边求救者");
		PostDangerousPeople();
		initData();
		initView();
	}

	private void PostDangerousPeople() {
		mLoadControler = RequestManager.getInstance().post(
				Constant.URL_AROUD_DANGEROUS, null, new RequestListener() {

					@Override
					public void onSuccess(String response, String url,
							int actionId) {
						Log.i("cao", "data:" + response);
					}

					@Override
					public void onRequest() {

					}

					@Override
					public void onError(String errorMsg, String url,
							int actionId) {

					}
				}, 0);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			finish();
			break;
		default:
			break;
		}
		return super.onOptionsItemSelected(item);
	}

	private void initView() {
		mText = (TextView) findViewById(R.id.search_text);
		int lp = mText.getLayoutParams().width;

		mEdit = (EditText) findViewById(R.id.search_edit);
		lps = new LinearLayout.LayoutParams(
				Util.getScreenWidth(SearchActivity.this) - lp
						- Util.dip2px(SearchActivity.this, 32), Util.dip2px(
						SearchActivity.this, 32));
		lps.leftMargin = Util.dip2px(SearchActivity.this, 8);
		mEdit.setLayoutParams(lps);

		mListView = (PullToRefreshListView) findViewById(R.id.pullToRefresh);

		mListView.setAdapter(adapter);
		mListView.setOnItemClickListener(this);
	}

	private void initData() {
		intent = new Intent();
	}

	@Override
	public void onItemClick(AdapterView<?> parent, View view, int position,
			long id) {
		switch (position) {
		case 0:
			intent.setClass(this, MapActivity.class);
			startActivity(intent);
			break;
		case 1:
			intent.setClass(this, MapActivity.class);
			startActivity(intent);
			break;

		default:
			break;
		}
	}

	class MyAdapter extends BaseAdapter {
		private List<Map<String, String>> mItem;
		private Context context;

		public MyAdapter(List<Map<String, String>> mItem, Context context) {
			this.mItem = mItem;
			this.context = context;
		}

		@Override
		public int getCount() {
			return mItem.size();
		}

		@Override
		public Object getItem(int arg0) {
			return mItem.get(arg0);
		}

		@Override
		public long getItemId(int arg0) {
			return arg0;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View rootView;
			ViewHolder viewHolder;
			if (convertView == null) {
				viewHolder = new ViewHolder();
				rootView = LayoutInflater.from(context).inflate(
						R.layout.item_search, parent, false);
				viewHolder.mNameText = (TextView) rootView
						.findViewById(R.id.txt_near);
				viewHolder.mHeadImage = (ImageView) rootView
						.findViewById(R.id.img_icon);
				rootView.setTag(viewHolder);
			} else {
				rootView = convertView;
				viewHolder = (ViewHolder) rootView.getTag();
			}
			viewHolder.mNameText.setText(mItem.get(position).get("title"));
			viewHolder.mHeadImage.setImageResource(Integer.parseInt(mItem.get(
					position).get("img")));
			return rootView;
		}

		private class ViewHolder {
			private TextView mNameText;
			private ImageView mHeadImage;
		}

	}

}