package com.pinsheng.help;

import java.util.List;

import com.android.volley.toolbox.ClearCacheRequest;
import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.location.LocationClientOption.LocationMode;
import com.pinsheng.app.HELPApllication;
import com.pinsheng.dialog.DialogSetupFragment;
import com.pinsheng.map.MapActivity;
import com.pinsheng.map.SearchActivity;
import com.pinsheng.mode.Person;
import com.pinsheng.service.HelpService;
import com.pinsheng.util.Util;
import com.pinsheng.view.CircleView;
import com.pinsheng.view.CircleView.OnCircleViewClickListener;
import com.slider.slider_switch.Slider_Switch;
import com.slider.slider_switch.Slider_Switch.OnChangedListener;

import android.app.Fragment;
import android.app.FragmentManager;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.Vibrator;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.RotateAnimation;
import android.widget.CompoundButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.CompoundButton.OnCheckedChangeListener;

public class HELPFragment extends Fragment implements OnClickListener, OnCircleViewClickListener{
	private TextView mLocationText;
	private ImageView mImageView;
	private CircleView mMainImageView;
	private FragmentManager mFragmentManager;
	private Intent intent;
	private Slider_Switch shake_switch;
	private RotateAnimation rotateAnimation;

	// 获取地理位置
	private LocationClient mLocationClient;
	public MyLocationListener mMyLocationListener;
	private LocationMode tempMode = LocationMode.Hight_Accuracy;
	private String tempcoor = "gcj02";
	private static String str = null;
	
	private static final String ADDTAG = "0";
	private static final String PEOPLETAG = "1";
	

	private Handler handler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			switch (msg.what) {
			case 1:
				mLocationText.setText(str + "(点我刷新！)");
				break;
			case 2:
				mLocationText.setText("无法获取 (点我刷新)");
			}
		}

	};

	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		mFragmentManager = getFragmentManager();
		intent = new Intent();
		initAnimation();
	}


	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View v = inflater.inflate(R.layout.fragment_helps, container, false);
		initView(v);
		return v;
	}


	@Override
	public void onClick(View view) {
		switch (view.getId()) {
		case R.id.main_address_text:
			mLocationText.setText(" 获取中...");
			if (!Util.isNetWorkAvilable(getActivity())) {
				Util.Toast(getActivity(), "网络异常,无法获取你所处的位置！");
				mLocationText.setText("无法获取 (点我刷新)");
			} else {
				// 设置位置请求
				mLocationClient = new LocationClient(getActivity().getApplicationContext());
				mMyLocationListener = new MyLocationListener(handler);
				mLocationClient.registerLocationListener(mMyLocationListener);
				InitLocation();
				mLocationClient.start();
			}
			break;
		case R.id.img_earth:
			intent.setClass(getActivity(), SearchActivity.class);
			startActivity(intent);
			break;

		default:
			break;
		}

	}
	
	class MyLocationListener implements BDLocationListener {
		private Handler handler;

		MyLocationListener(Handler handler) {
			this.handler = handler;
		}

		@Override
		public void onReceiveLocation(BDLocation location) {
			Log.i("cao", "location:" + location.getAddrStr());
			str = location.getAddrStr();
			((HELPApllication) (getActivity().getApplication())).setLocation(str);
			Message message = new Message();
			if (str != null) {
				message.what = 1;

			} else {
				message.what = 2;
			}
			handler.sendMessage(message);

		}
	}

	@Override
	public void OnProgressAnimation(ImageView imageView) {
		imageView.setVisibility(View.VISIBLE);
		imageView.startAnimation(rotateAnimation);
	}

	@Override
	public void OnCancleAnimation(ImageView imageView) {
		rotateAnimation.cancel();
		imageView.clearAnimation();
		imageView.setVisibility(View.GONE);
	}

	@Override
	public void OnPersonClick(Person person) {
		if (Util.QuickClick.isQuickClick()) {
			return;
		} else {
			new DialogSetupFragment(person).show(mFragmentManager, PEOPLETAG);
		}
	}

	@Override
	public void OnMainClick() {
		List<Person> person = ((HELPApllication) (getActivity().getApplication()))
				.getPersons();
		((Vibrator) getActivity().getSystemService(Context.VIBRATOR_SERVICE)).vibrate(new long[] {
				500, 480, 500, 480 }, -1);
		Util.Toast(getActivity(), "救命！！！");
		if (person.size() == 0) {
			Util.Toast(getActivity(), "你还没设置联系人呢...");
		} else {
			((Vibrator) getActivity().getSystemService(Context.VIBRATOR_SERVICE)).vibrate(new long[] {
					500, 480, 500, 480 }, -1);
			 Util.send(getActivity(), person, ((MainActivity)getActivity()).getWXApplication().getLocation());
			 Util.Call(getActivity(), person);
		}
	}

	@Override
	public void OnAddClick() {
		if (Util.QuickClick.isQuickClick()) {
			return;
		} else {
			new DialogSetupFragment().show(mFragmentManager, ADDTAG);
		}
	}
	
	private void initView(View view) {
		shake_switch = (Slider_Switch) view.findViewById(R.id.shake_switch);
		mLocationText = (TextView) view.findViewById(R.id.main_address_text);
		mImageView = (ImageView) view.findViewById(R.id.img_earth);
		mMainImageView = (CircleView) view.findViewById(R.id.help_img);
		mLocationText.setText("获取中...");
		// 设置位置请求
		mLocationClient = new LocationClient(getActivity().getApplicationContext());
		mMyLocationListener = new MyLocationListener(handler);
		mLocationClient.registerLocationListener(mMyLocationListener);
		InitLocation();
		if (!Util.isNetWorkAvilable(getActivity())) {
			mLocationText.setText("无法获取 (点我刷新)");
		} else {
			mLocationClient.start();
		}
		mMainImageView.setOnCircleViewClickListener(this);
		mLocationText.setOnClickListener(this);
		mImageView.setOnClickListener(this);
		
		shake_switch.setChecked(((HELPApllication) (getActivity().getApplication()))
				.isShakeOpen());
		shake_switch.setOnChangedListener(new OnChangedListener() {
			
			@Override
			public void OnChanged(Slider_Switch Slider, boolean checkState) {
				if (checkState) {
					getActivity().startService(new Intent(getActivity(),
							HelpService.class));
				} else {
					getActivity().stopService(new Intent(getActivity(),
							HelpService.class));
				}
				((HELPApllication) (getActivity().getApplication())).setShakeOpen(checkState);
			}
		});
		refreshPerson();
	}
	
	private void InitLocation() {
		LocationClientOption option = new LocationClientOption();
		option.setLocationMode(tempMode);// 设置定位模式
		option.setCoorType(tempcoor);// 返回的定位结果是百度经纬度，默认值gcj02
		int span = 50000;

		option.setScanSpan(span);// 设置发起定位请求的间隔时间为50000ms
		option.setIsNeedAddress(true);
		mLocationClient.setLocOption(option);
	}
	
	private void initAnimation() {
		rotateAnimation = new RotateAnimation(0, 360,
				Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF,
				0.5f);
		rotateAnimation.setDuration(500);
	}

	
	public void refreshPerson() {
		mMainImageView.removeAllPerson();
		mMainImageView.addPerson(((HELPApllication) getActivity().getApplication())
				.getPersons());
	}
	
}
