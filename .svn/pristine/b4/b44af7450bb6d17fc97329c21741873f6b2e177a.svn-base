package com.pinsheng.map;

import com.android.http.LoadControler;
import com.android.http.RequestManager;
import com.android.http.RequestManager.RequestListener;
import com.google.gson.Gson;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.pinsheng.app.HELPApllication;
import com.pinsheng.help.R;
import com.pinsheng.mode.DangerousaAll;
import com.pinsheng.mode.DangerousaAll.Data;
import com.pinsheng.util.Constant;
import com.pinsheng.util.Util;

import android.app.ActionBar;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

public class SearchActivity extends Activity implements OnItemClickListener,
		OnRefreshListener2<ListView> {
	private PullToRefreshListView mListView;
	private ProgressBar mPro;
	private EditText mEdit;
	private TextView mTextSearch;

	private MyAdapter adapter;
	private Intent intent;

	private LoadControler mLoadControler = null;
	private LinearLayout.LayoutParams lps;

	private Data[] dangerous;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_search);
		ActionBar actionBar = this.getActionBar();
		actionBar.setIcon(R.drawable.ic_return);
		actionBar.setHomeButtonEnabled(true);
		actionBar.setTitle("周边求救者");
		initData();
		initView();
		PostDangerousPeople(false);
	}

	private void PostDangerousPeople(final boolean isPull) {
		mLoadControler = RequestManager.getInstance().post(
				Constant.URL_AROUD_DANGEROUS, "{}", new RequestListener() {

					@Override
					public void onSuccess(String response, String url,
							int actionId) {
						Log.i("cao", "" + response);
						DangerousaAll danger = new Gson().fromJson(response,
								DangerousaAll.class);
						switch (danger.getStatus()) {
						case 200:
							dangerous = danger.getData();
							if (dangerous != null) {
								if (!isPull) {
									mListView.setVisibility(View.VISIBLE);
									mPro.setVisibility(View.GONE);
								} else {
									mListView.onRefreshComplete();
								}
								Sorting();
							} else {
								if (!isPull) {
									mListView.setVisibility(View.VISIBLE);
									mPro.setVisibility(View.GONE);
								} else {
									mListView.onRefreshComplete();
								}
								Util.Toast(SearchActivity.this, "没有受害者!");
							}
							break;

						default:
							dangerous = null;
							if (!isPull) {
								mListView.setVisibility(View.VISIBLE);
								mPro.setVisibility(View.GONE);
							} else {
								Util.Toast(SearchActivity.this, "没有受害者!");
								mListView.onRefreshComplete();
							}
							break;
						}
						adapter.RefreshList();

					}

					@Override
					public void onRequest() {
						if (!isPull) {
							mListView.setVisibility(View.GONE);
							mPro.setVisibility(View.VISIBLE);
						}
					}

					@Override
					public void onError(String errorMsg, String url,
							int actionId) {
						if (!isPull) {
							mListView.setVisibility(View.GONE);
							mPro.setVisibility(View.VISIBLE);
						} else {
							Util.Toast(SearchActivity.this, "加载失败！");
							mListView.onRefreshComplete();
						}
					}
				}, 0);
	}

	private void initView() {
		mPro = (ProgressBar) findViewById(R.id.search_gonepro);
		mTextSearch = (TextView) findViewById(R.id.search_text);
		int lp = mTextSearch.getLayoutParams().width;

		mEdit = (EditText) findViewById(R.id.search_edit);
		lps = new LinearLayout.LayoutParams(
				Util.getScreenWidth(SearchActivity.this) - lp
						- Util.dip2px(SearchActivity.this, 32), Util.dip2px(
						SearchActivity.this, 32));
		lps.leftMargin = Util.dip2px(SearchActivity.this, 8);
		mEdit.setLayoutParams(lps);

		mListView = (PullToRefreshListView) findViewById(R.id.pullToRefresh);
		mListView.setMode(Mode.PULL_FROM_START);
		mListView.getLoadingLayoutProxy(true, false);
		mListView.setAdapter(adapter);
		mListView.setOnRefreshListener(this);
		mListView.setOnItemClickListener(this);
	}

	private void initData() {
		adapter = new MyAdapter();
		intent = new Intent();
	}

	private void Sorting() {
		for (int i = 0; i < dangerous.length - 1; i++) {
			for (int j = 0; j < dangerous.length - 1 - i; j++) {
				Data temp;
				int distance1 = (int) Util.Distance(
						((HELPApllication) (getApplication())).getJingdu(),
						((HELPApllication) (getApplication())).getWeidu(),
						dangerous[j].getJingdu(), dangerous[j].getWedu());
				int distance2 = (int) Util.Distance(
						((HELPApllication) (getApplication())).getJingdu(),
						((HELPApllication) (getApplication())).getWeidu(),
						dangerous[j + 1].getJingdu(),
						dangerous[j + 1].getWedu());
				if (distance1 > distance2) {
					temp = dangerous[j];
					dangerous[j] = dangerous[j + 1];
					dangerous[j + 1] = temp;
				}
			}
		}
	}

	@Override
	public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {
		PostDangerousPeople(true);
	}

	@Override
	public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {

	}

	@Override
	public void onItemClick(AdapterView<?> parent, View view, int position,
			long id) {
		switch (position) {
		case 0:
			intent.setClass(this, MapActivity.class);
			startActivity(intent);
			break;
		case 1:
			intent.setClass(this, MapActivity.class);
			startActivity(intent);
			break;

		default:
			break;
		}
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			finish();
			break;
		default:
			break;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		if (mLoadControler != null) {
			mLoadControler.cancel();
		}
	}

	class MyAdapter extends BaseAdapter {

		public MyAdapter() {
		}

		public void RefreshList() {
			notifyDataSetChanged();
		}

		@Override
		public int getCount() {
			if (dangerous != null) {
				return dangerous.length;
			} else {
				return 0;
			}
		}

		@Override
		public Object getItem(int arg0) {
			return dangerous[arg0];
		}

		@Override
		public long getItemId(int arg0) {
			return arg0;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View rootView;
			ViewHolder viewHolder;
			int distance = (int) Util.Distance(
					((HELPApllication) (getApplication())).getJingdu(),
					((HELPApllication) (getApplication())).getWeidu(),
					dangerous[position].getJingdu(),
					dangerous[position].getWedu());;
			if (convertView == null) {
				viewHolder = new ViewHolder();
				rootView = LayoutInflater.from(SearchActivity.this).inflate(
						R.layout.item_search, parent, false);
				viewHolder.location = (TextView) rootView.findViewById(R.id.search_item_location);
				viewHolder.time = (TextView) rootView.findViewById(R.id.search_item_time);
				viewHolder.distance = (TextView) rootView.findViewById(R.id.search_item_distance);
				rootView.setTag(viewHolder);
			} else {
				rootView = convertView;
				viewHolder = (ViewHolder) rootView.getTag();
			}
			if (dangerous[position].getAddress() != null) {
				viewHolder.location.setText(getString(R.string.search_location, dangerous[position].getAddress()));
			} else {
				viewHolder.location.setText(getString(R.string.search_location, "暂未获取到位置"));
			}
			if (dangerous[position].getTime() != null) {
				viewHolder.time.setText(getString(R.string.search_time, dangerous[position].getTime()));
			} else {
				viewHolder.time.setText(getString(R.string.search_time, "暂未获取到时间"));
			}
			if (distance != 0) {
				viewHolder.distance.setText(getString(R.string.search_distance, "" + distance));
			} else {
				viewHolder.distance.setText(getString(R.string.search_distance, "暂未获取到距离"));
			}
			return rootView;
		}

		private class ViewHolder {
			private TextView location;
			private TextView time;
			private TextView distance;
		}

	}
}