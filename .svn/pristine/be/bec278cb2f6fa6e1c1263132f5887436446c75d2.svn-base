package com.pinsheng.service;

import java.util.List;

import com.pinsheng.app.HELPApllication;
import com.pinsheng.help.MainActivity;
import com.pinsheng.help.R;
import com.pinsheng.mode.Person;
import com.pinsheng.util.Util;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.IBinder;
import android.os.PowerManager;
import android.os.Vibrator;
import android.support.v4.app.NotificationCompat;
import android.util.Log;

public class HelpService extends Service implements SensorEventListener {
	private SensorManager sensorManager;
	private Sensor accelerateSensor;
	private NotificationManager notificationManager;
	private NotificationCompat.Builder mBduilder;
	private Notification notification;
	
	public static int count = 0;
	

	@Override
	public IBinder onBind(Intent arg0) {
		return null;
	}

	@Override
	public void onCreate() {
		notificationManager = (NotificationManager)getSystemService(NOTIFICATION_SERVICE);
		mBduilder = new NotificationCompat.Builder(this);
		mBduilder.setSmallIcon(R.drawable.ic_launcher);
		mBduilder.setContentTitle("失联小助手");
		mBduilder.setContentText("失联小助手开启");
		mBduilder.setTicker("失联小助手");
		Intent i = new Intent(this, MainActivity.class);   
		i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
		PendingIntent contentIntent = PendingIntent.getActivity(this, 0, i, PendingIntent.FLAG_CANCEL_CURRENT);
		mBduilder.setContentIntent(contentIntent);
		notification = mBduilder.build();
		notification.flags = Notification.FLAG_ONGOING_EVENT;
		notificationManager.notify(0, notification);
		
		sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
		accelerateSensor = sensorManager
				.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		Log.i("cao", "open");
		flags = START_STICKY;
		if (sensorManager != null) {
			sensorManager.registerListener(this, accelerateSensor,
					SensorManager.SENSOR_DELAY_GAME);
		}
		return super.onStartCommand(intent, flags, startId);
	}

	@Override
	public void onDestroy() {
		if(sensorManager != null) {
			sensorManager.unregisterListener(this);
		}
		notificationManager.cancelAll();
		super.onDestroy();
	}

	@SuppressWarnings("deprecation")
	@Override
	public void onSensorChanged(SensorEvent event) {

		float[] values = event.values;

		float x = values[0];
		float y = values[1];
		float z = values[2];
		int medumValue = 16;
		PowerManager pm = (PowerManager) this
				.getSystemService(Context.POWER_SERVICE);
		if (pm.isScreenOn()) {
			if (Math.abs(x) > medumValue || Math.abs(y) > medumValue
					|| Math.abs(z) > medumValue) {
				if (Util.ShakeQuickClick.isQuickClick()) {
					return;
				} else {
					count++;
					Log.i("cao", "count" + ":" + count);
					if (count == 3) {
						((Vibrator) getSystemService(VIBRATOR_SERVICE))
								.vibrate(new long[] { 500, 480, 500, 480 }, -1);
						List<Person> person = ((HELPApllication) (getApplication()))
								.getPersons();
						if (person.size() == 0) {
							Util.Toast(this, "你还没设置联系人呢");
						} else {
							((Vibrator) getSystemService(VIBRATOR_SERVICE))
									.vibrate(new long[] { 500, 480, 500, 480 },
											-1);
							Util.send(this, person, ((HELPApllication) (getApplication())).getLocation());
							Util.Call(this, person);
							Util.Toast(this, "检测到摇晃，发送短信和拨打电话！");
							count = 0;
						}
					}
				}
			}
		}
	}

	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {

	}
}
